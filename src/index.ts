import {
  app,
  BrowserWindow,
  globalShortcut,
  ipcMain,
  Menu,
  nativeImage,
  nativeTheme,
  screen,
  Tray,
} from "electron";
import * as path from "path";
import * as clipboard from "electron-clipboard-extended";

import Store from "electron-store";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let mainWindow: BrowserWindow;
let tray: Tray;
let store: Store;

const createWindow = (): void => {
  store = new Store();

  // Create the browser window.
  const { size: screenSize } = screen.getDisplayNearestPoint(
    screen.getCursorScreenPoint()
  );
  const { width, height } = screenSize;
  mainWindow = new BrowserWindow({
    height: height,
    width: width / 5,
    alwaysOnTop: true,
    frame: false,
    show: false,
    enableLargerThanScreen: true,
    x: 0,
    y: 0,
    resizable: false,
    movable: false,
    skipTaskbar: true,
    roundedCorners: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    vibrancy: "fullscreen-ui",
    visualEffectState: "active",
  });
  mainWindow.setVisibleOnAllWorkspaces(true, { visibleOnFullScreen: true });
  mainWindow.setAlwaysOnTop(true, "screen-saver", 1);
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  mainWindow.on("blur", () => {
    mainWindow.hide();
  });

  ipcMain.on("text-selected", (event, data) => {
    clipboard.writeText(data);
    mainWindow.hide();
  });

  mainWindow.on("ready-to-show", () => {
    deduplicateAndPushToStore(true);

    store.onDidChange("history", (data) => {
      console.log("STORE CHANGE -----", data);
      mainWindow.webContents.send("bootstrap", data);
    });

    // console.log("PREVIOUS DATA", history);
    // console.log("PREVIOUS DATA SETTIFIED", new Set(history));

    // mainWindow.webContents.send("bootstrap", history);
  });

  // Open the DevTools.
  mainWindow.webContents.openDevTools({ mode: "undocked" });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  createWindow();
  const image = nativeImage.createFromPath(
    path.join(
      __dirname,
      nativeTheme.shouldUseDarkColors
        ? "./images/icon-dark.png"
        : "./images/icon.png"
    )
  );

  tray = new Tray(image.resize({ width: 16, height: 16 }));

  const contextMenu = Menu.buildFromTemplate([
    {
      label: "Open Space",
      type: "normal",
      click: () => {
        createWindow();
      },
    },
  ]);

  tray.setToolTip("This is my application.");
  tray.setContextMenu(contextMenu);

  globalShortcut.register("CommandOrControl+Shift+V", () => {
    mainWindow.show();
  });

  clipboard
    .on("text-changed", () => {
      const currentText: string = clipboard.readText();
      // Send data to window
      // mainWindow.webContents.send("text-copied", currentText);

      deduplicateAndPushToStore(false, currentText);
      // const history: string[] = store.get("history") as string[];
      // const newHistroy = [currentText, ...history];
      // const deDup = new Set(newHistroy);
      // store.set("history", Array.from(deDup));
    })
    .on("image-changed", () => {
      const currentImage = clipboard.readImage();
    })
    .startWatching();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

const deduplicateAndPushToStore = (
  initial?: boolean,
  additionalData?: string
) => {
  // store.clear();
  const history: string[] = store.get("history") as string[];
  let data: string[];

  if (history && Array.isArray(history) && history.length > 0) {
    data = additionalData ? [additionalData, ...history] : history;
  } else {
    data = [additionalData];
  }

  data = data.filter((n) => n);
  data = Array.from(new Set(data));
  store.set("history", data);
  if (initial) {
    mainWindow.webContents.send("bootstrap", data);
  }
};
